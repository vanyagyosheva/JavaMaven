/**
 * dependent libraries:
 * 
 * poi-3.14-20160307.jar
 * poi-ooxml-3.14-20160307.jar
 * poi-ooxml-schemas-3.14-20160307.jar
 */
package com.test.excel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Vector;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.ghc.ghTester.expressions.Function;

/**
 * @author kokogeo
 *
 */
public class ReadCellData extends Function {
	private int size;
	private Vector<Function> params;

	public ReadCellData() {
	}

	public ReadCellData(int size, Vector<Function> params) {
		this.size = size;
		this.params = params;
	}

	@SuppressWarnings("unchecked")
	public Function create(int size, @SuppressWarnings("rawtypes") Vector params) {
		return new ReadCellData(size, params);
	}

	public Object evaluate(Object data) {
		String result = null;

		if (size != getMaxParameters()) {
			writeToConsole(data, LOG_ERROR,
					"Wrong number of parameters! Expected: excelFilepath, sheetName, cellReference");
			return null;
		}

		try {
			String excelFilepath = params.get(0).evaluateAsString(data);
			String sheetName = params.get(1).evaluateAsString(data);
			String cellReference = params.get(2).evaluateAsString(data); // e.g. A3

			writeToConsole(data, this.LOG_INFO, "Function \"ReadCellData\" is called with params: " + excelFilepath
					+ ", " + sheetName + ", " + cellReference);

			File file = new File(excelFilepath);
			FileInputStream fileInStrm = new FileInputStream(file);
			Workbook wb = new XSSFWorkbook(fileInStrm);
			CellReference cr = new CellReference(cellReference); // may use CellAddress

			Sheet theSheet = wb.getSheet(sheetName);
			if (theSheet == null) {
				wb.close();
				throw new IllegalArgumentException("Sheet name was not found in excel! - " + sheetName);
			}

			Row rw = theSheet.getRow(cr.getRow());
			if (rw == null) {
				wb.close();
				throw new IllegalArgumentException("Invalid column reference! - " + cellReference);
			}

			Cell cl = rw.getCell(cr.getCol()); // no null expected

			/* working with integer, double, date, string */
			switch (cl.getCellType()) {
			case Cell.CELL_TYPE_NUMERIC:
				if (DateUtil.isCellDateFormatted(cl)) {
					result = String.valueOf(cl.getDateCellValue());
				} else {
					// if the decimal separator is needed to be different - use String.format
					double returnValue = cl.getNumericCellValue();

					if ((int) returnValue == returnValue) {
						result = String.valueOf((int) returnValue);
					} else {
						result = String.valueOf(returnValue);
					}
				}
				break;
			case Cell.CELL_TYPE_STRING:
				result = cl.getStringCellValue();
				break;
			default:
				result = null;
				break;
			}

			wb.close();

			if (result == null) {
				writeToConsole(data, LOG_INFO, "Cell value is empty!");
			}

			writeToConsole(data, this.LOG_SUCCESS, "Cell value retrieved: " + result);

		} catch (FileNotFoundException e) {
			writeToConsole(data, this.LOG_ERROR, e.getMessage());
			return null;
		} catch (IllegalArgumentException e) {
			writeToConsole(data, this.LOG_ERROR, e.getMessage());
			return null;
		} catch (IOException e) {
			writeToConsole(data, this.LOG_ERROR, e.getMessage());
			return null;
		}

		return result;
	}
}
