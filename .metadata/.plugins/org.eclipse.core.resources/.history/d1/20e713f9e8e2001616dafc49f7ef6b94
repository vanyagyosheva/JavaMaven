package com.selenium.controls;

import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;


public class Control {
	// The name of the control. This value will be used in the generated report.
    private string descriptiveName;

    // By expression which uniquely identifies the control.
    private By criterion;

    //The element located on the screen
    private IWebElement _webElement;


    /**
     * Constructor of the base element Control
     * @param name="descriptiveName">name of the element which will appear in the generated report
     * @param name="criterion">By expression which uniquely identifies the element in the web page
     */
    public Control(string descriptiveName, By criterion)
    {
        this.descriptiveName = descriptiveName;
        this.criterion = criterion;
    }

    protected void InitWebElement()
    {
        IWebDriver webDriver = TestContextDriver.GetWebDriver();
        long timeout = 30;

        // Check whether web driver is initialized
        if (webDriver != null)
        {
            try
            {
                WebDriverWait wait = new WebDriverWait(webDriver, TimeSpan.FromSeconds(timeout));
                _webElement = wait.Until(ExpectedConditions.ElementExists(criterion));
            }
            catch(Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
                Reporter.Info($"Control {this.descriptiveName}, exception: {ex.Message}");
                TakeScreenShot.ScreenShot();
                Reporter.Fail("Ooops. Timed out. The element could not be located.");
            }
        }

        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail("WebDriver is NOT initialised. Please verify that your test class extends BaseTestCase.");
        }
    }

    public void Click()
    {
        InitWebElement();
        if (_webElement != null)
        {
            _webElement.Click();
            Reporter.Info(GetDescriptiveName() + " is clicked");
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail(GetDescriptiveName() + " is NOT initialized");
        }
    }

    public bool IsEnabled()
    {
        InitWebElement();
        bool result = false;
        if (_webElement != null)
        {
            result = _webElement.Enabled;
            Reporter.Info(GetDescriptiveName() + " is " + (result ? "enabled" : "disabled"));
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail(GetDescriptiveName() + " is NOT initialized");
        }
        return result;
    }

    public bool IsVisible()
    {
        InitWebElement();
        bool result = false;
        if (_webElement != null)
        {
            result = _webElement.Displayed;
            //Reporter.Info(this.GetDescriptiveName() + " is " + (result ? "visible" : "not visible"));
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail(GetDescriptiveName() + " is NOT initialised");
        }
        return result;
    }

    public void AssertIsVisible()
    {
        if (IsVisible())
        {
            Reporter.Pass(GetDescriptiveName() + " is visible");
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail(GetDescriptiveName() + " is NOT visible");
        }
    }

    public void AssertElementIsNotPresent()
    {
        if (TestContextDriver.GetWebDriver().FindElements(this.criterion).Count == 0)
        {
            Reporter.Pass(GetDescriptiveName() + " is NOT present/visible on the page.");
        }
        else
        {
            if (!IsVisible())
            {
                Reporter.Pass(GetDescriptiveName() + " is present on the page BUT it is not visible.");
            }
            else
            {
                TakeScreenShot.ScreenShot();
                Reporter.Fail(GetDescriptiveName() + " is displayed on the page.");
            }
        }
    }

   
    /**
     * Gets the subclass name. This is used as a test element type. The subclasses are Button, TextBox, etc...
     * @return
     */
    public string GetDescriptiveName()
    {
        string controlType = this.GetType().Name;
        return descriptiveName + " " + controlType;
    }

    public By GetCriterion()
    {
        return criterion;
    }

  
    /**
     * The test element if it is initialized properly
     * @return
     */
    protected IWebElement GetWebElement()
    {
        if (_webElement != null)
        {
            return _webElement;
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail("Test Element is not defined");
        }
        return null;
    }

    public void SendKeys(string input)
    {
        InitWebElement();
        
        InitWebElement();
        if (_webElement != null)
        {
            _webElement.SendKeys(input);
            Reporter.Info(GetDescriptiveName() + " the input is entered.");
        }
        else
        {
            TakeScreenShot.ScreenShot();
            Reporter.Fail(GetDescriptiveName() + " is NOT initialized");
        }
        
    }
}


}
